@function getBrightness($color){
	$red : red($color);
	$green : green($color);
	$blue : blue($color);
	@return (($red * 299) + ($green * 587) + ($blue * 114)) / 1000;
}

@function _ss-str-explode($string, $delimiter: "") {
  $result: ();
  $length: str-length($string);

  @if str-length($delimiter) == 0 {
    @for $i from 1 through $length {
      $result: append($result, str-slice($string, $i, $i));
    }

    @return $result;
  }

  $running: true;
  $remaining: $string;

  @while $running {
    $index: str-index($remaining, $delimiter);

    @if $index {
      $slice: str-slice($remaining, 1, $index - 1);
      $result: append($result, $slice);
      $remaining: str-slice($remaining, $index + str-length($delimiter));
    } @else {
      $running: false;
    }
  }

  @return append($result, $remaining);
}

@function strExplode($string, $delimiter: '') {
	@if type-of($string) != "string" {
		@error "`explode` function expecting a string; #{type-of($string)} given.";
	}

	@if type-of($delimiter) != "string" {
		@error "`explode` function expecting a string; #{type-of($delimiter)} given.";
	}

	@return _ss-str-explode($string, $delimiter);
}


@function strReplace($string, $substr, $newsubstr, $all: 0) {
	$string:$string+'';
	$position-found: str-index($string, $substr);
	$processed: ();

	@while ($position-found and $position-found > 0) {
		$length-substr: str-length($substr);
		@if (1 != $position-found) {
			$processed: append($processed, str-slice($string, 0, $position-found - 1));
		}
		$processed: append($processed, $newsubstr);
		$string: str-slice($string, $position-found + $length-substr);

		$position-found: 0;

		@if ($all > 0) {
			$position-found: str-index($string, $substr);
		}
	}

	$processed: append($processed, $string);
	$string: "";

	@each $s in $processed {
		$string: #{$string}#{$s};
	}

	@return $string;
}
